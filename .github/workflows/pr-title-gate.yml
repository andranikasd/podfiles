name: PR Title Gate
on:
  pull_request_target:
    types: [opened, edited, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  title_lint:
    name: Conventional PR Title
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            perf
            docs
            ops
            chore
            refactor
            style
            test
            build
            ci
            revert
          requireScope: false
          subjectPattern: ^.{1,72}$
          enablePrComment: true

  bump_guard:
    if: ${{ github.event.pull_request.base.ref == github.event.repository.default_branch }}
    name: Bump Guard (Title â‰¥ Commits)
    runs-on: ubuntu-latest
    needs: [title_lint]
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title || '';
            const body  = context.payload.pull_request.body  || '';
            const types = ['feat','fix','perf','docs','ops','chore','refactor','style','test','build','ci','revert'];
            function bumpFrom(message, extraBody='') {
              const first = (message || '').split('\n')[0];
              const re = new RegExp(`^(${types.join('|')})(\\(.+\\))?(!)?:\\s+`);
              const m = first.match(re);
              const hasBreaking = !!(m && m[3]) || /(^|\n)BREAKING CHANGE:/i.test((message||'') + '\n' + (extraBody||''));
              if (hasBreaking) return 3; if (m && m[1]==='feat') return 2;
              if (m && (m[1]==='fix' || m[1]==='perf')) return 1; return 0;
            }
            const { data: commits } = await github.rest.pulls.listCommits({
              owner: context.repo.owner, repo: context.repo.repo,
              pull_number: context.payload.pull_request.number, per_page: 250
            });
            let commitBump = 0;
            for (const c of commits) { commitBump = Math.max(commitBump, bumpFrom(c.commit.message, c.commit.body)); }
            const titleBump = bumpFrom(title, body);
            const names = ['none','patch','minor','major'];
            core.info(`Commit bump: ${names[commitBump]} | Title bump: ${names[titleBump]}`);
            if (commitBump > titleBump) {
              core.setFailed(`PR title understates bump (title=${names[titleBump]}, commits=${names[commitBump]}).`);
            }
